diff --git a/inc/convert.h b/inc/convert.h
index 0f8aff7..1ebd727 100644
--- a/inc/convert.h
+++ b/inc/convert.h
@@ -39,8 +39,6 @@ const int brightness2essential[BRIGHTNESS2NUMBER] = {10, 11, 8, 1};
 const int brightness1essential[BRIGHTNESS1NUMBER] = {14};
 
 
-using namespace std;
-
 float radiancetobrightness(int radiance, float wavelength, float32 scale, float32 offset);
 void getbrightness(arrays *a, ProgressViewer *progress, int progresspart);
 
diff --git a/inc/detection.h b/inc/detection.h
index 7fda0d0..defd769 100644
--- a/inc/detection.h
+++ b/inc/detection.h
@@ -45,12 +45,6 @@
 #define THRESHOLDT11 277
 
 
-
-
-using namespace std;
-
-
-
 bool detect(arrays *a, ProgressViewer *progress, int progresspart);
 
 #endif /* DETECTION_H_ */
diff --git a/inc/pic.h b/inc/pic.h
index 79902b7..0f5b6ce 100644
--- a/inc/pic.h
+++ b/inc/pic.h
@@ -12,8 +12,16 @@
 
 #include <fstream>
 #include <iostream>
+#include <string>
 #include <png++/png.hpp>
 #include "hdf/mfhdf.h"
+//#include <gdal.h>
+
+#include "cpl_string.h"
+#include <ogr_spatialref.h>
+//#include "gdal.h"
+//#include "cpl_conv.h"
+
 #include "structures.h"
 
 
@@ -21,8 +29,7 @@
 #define START1		7
 #define START2		22
 
-using namespace std;
-
 bool savepicture(char *filenamemap, char *filenamemask, arrays *a, ProgressViewer *progress, int progresspart);
+bool createGDALRaster(char *filenamemap, char *filenamemask,  arrays *a, ProgressViewer *progress, int progresspart);
 
 #endif /* PIC_H_ */
diff --git a/inc/readhdf.h b/inc/readhdf.h
index 338af1f..a1f8448 100644
--- a/inc/readhdf.h
+++ b/inc/readhdf.h
@@ -30,9 +30,7 @@
 
 
 
-using namespace std;
-
-bool readarray(int32 sds_id, unsigned short **dest, int32 *rank, int32 *dimsizes, int32 *datatype, int32 *numattr, ofstream &log, int depth);
+bool readarray(int32 sds_id, unsigned short **dest, int32 *rank, int32 *dimsizes, int32 *datatype, int32 *numattr, std::ofstream &log, int depth);
 bool readarray32(int32 sds_id, float32 **dest, int32 *rank, int32 *dimsizes, int32 *datatype, int32 *numattr, int depth);
 bool readradiance(char *path, char *modisname, unsigned short ****radiance1, unsigned short ****radianceh, unsigned short ****radianceq,
 					unsigned short ****radiance2, float32 **offsets, float32 **scales, int *height, int *width);
diff --git a/plugin/cloudrecognitionplugin.pro b/plugin/cloudrecognitionplugin.pro
index c331d59..d491ea4 100644
--- a/plugin/cloudrecognitionplugin.pro
+++ b/plugin/cloudrecognitionplugin.pro
@@ -1,4 +1,4 @@
-QGIS_DIR = /usr/include/qgis/
+QGIS_DIR = /usr/include/qgis
 PROJECT_ROOT = ../
 TEMPLATE = lib
 CONFIG = qt plugin
diff --git a/plugin/interface.cpp b/plugin/interface.cpp
index 9fe896d..2c3048b 100644
--- a/plugin/interface.cpp
+++ b/plugin/interface.cpp
@@ -30,7 +30,7 @@ bool process(char *path1, char *pathh, char *pathq, char *imgpath, int rewrite_i
     a.cloudmask = (char **)malloc(a.heightq*sizeof(char *));
     for (i = 0; i < a.heightq; i++)
     {
-      a.cloudmask[i] = (char *)malloc(a.widthq*sizeof(char));
+        a.cloudmask[i] = (char *)malloc(a.widthq*sizeof(char));
     }
     progress->setValue(45);
     fprintf(stderr, "CHECK progress 45\n");
@@ -41,7 +41,8 @@ bool process(char *path1, char *pathh, char *pathq, char *imgpath, int rewrite_i
     progress->setValue(75);
     fprintf(stderr, "CHECK progress 80\n");
 
-    savepicture(imgpath, imgmaskpath, &a, progress, 15);
+    //savepicture(imgpath, imgmaskpath, &a, progress, 15);
+    createGDALRaster(imgpath, imgmaskpath, &a, progress, 15);
     progress->setValue(90);
     if (a.radianceq)
     {
diff --git a/plugin/qgiscloudrecognitionplugin.cpp b/plugin/qgiscloudrecognitionplugin.cpp
index b269bfe..462d5ac 100644
--- a/plugin/qgiscloudrecognitionplugin.cpp
+++ b/plugin/qgiscloudrecognitionplugin.cpp
@@ -185,7 +185,7 @@ void QgsCloudRecognitionPlugin::Process()
                               strcat(img, "/");
                           }
                           strcat(img, name);
-                          strcat(img, ".surface.png");
+                          strcat(img, ".surface.tiff");
                           strcat(img, "\0");
                           fprintf(stderr, "CHECK img: %s\n", img);
                       }
@@ -228,7 +228,7 @@ void QgsCloudRecognitionPlugin::Process()
                               strcat(imgmask, "/");
                           }
                           strcat(imgmask, name);
-                          strcat(imgmask, ".mask.png");
+                          strcat(imgmask, ".mask.tiff");
                           strcat(imgmask, "\0");
                           fprintf(stderr, "CHECK imgmask: %s\n", imgmask);
                       }
@@ -566,11 +566,11 @@ void QgsCloudRecognitionPlugin::addtodatabase()
     QFileDialog *dialog = new QFileDialog();
     dialog->setFileMode(QFileDialog::ExistingFiles);
     QStringList filters = QStringList();
-    filters << "any suitable files (MOD*.hdf *.surface.png *.mask.png)"
+    filters << "any suitable files (MOD*.hdf *.surface.tiff *.mask.tiff)"
             << "hdf MOD files (MOD*.hdf)"
-            << "result images (*.surface.png *.mask.png)"
+            << "result images (*.surface.tiff *.mask.tiff)"
             << "any files (*)";
-    //dialog->setNameFilter(trUtf8("hdf MOD files (MOD*.hdf), png result files (*.png)"));
+    //dialog->setNameFilter(trUtf8("hdf MOD files (MOD*.hdf), .tiff result files (*.tiff)"));
 
     dialog->setNameFilterDetailsVisible(true);
     dialog->setNameFilters(filters);
@@ -834,7 +834,7 @@ QGISEXTERN QString name()
 }
 QGISEXTERN QString description()
 {
-  return "A plugin that opens mod02.*.hdf files, creates cloud mask, and saves it to png";
+  return "A plugin that opens mod02.*.hdf files, creates cloud mask, and saves it to tiff";
 }
 QGISEXTERN QString version()
 {
diff --git a/src/base.cpp b/src/base.cpp
index ce64893..be69219 100644
--- a/src/base.cpp
+++ b/src/base.cpp
@@ -327,7 +327,7 @@ int addfiletodatabase(char *path)
   char *prefix = (char *)calloc(1,NAME_LENGTH);
   char *name = (char *)calloc(1,NAME_LENGTH);
   bool hdfmode = false;
-  bool pngmode = false;
+  bool tiffmode = false;
   slash = strstr(path, "/");
   while (slash != NULL)
   {
@@ -362,17 +362,17 @@ int addfiletodatabase(char *path)
   {
       hdfmode = true;
   }
-  else if (strcmp(last, ".png") == 0)
+  else if (strcmp(last, ".tiff") == 0)
   {
-      pngmode = true;
+      tiffmode = true;
   }
     char *selectstring = (char *)calloc(2048, 1);
-    if (pngmode)
+    if (tiffmode)
     {
         strncpy(name, lastslash + 1, prelast - lastslash - 1);
         strcpy(prefix, prelast);
-        fprintf(stderr, "CHECK png name: %s\n", name);
-        fprintf(stderr, "CHECK png postfix: %s\n", prefix);
+        fprintf(stderr, "CHECK tiff name: %s\n", name);
+        fprintf(stderr, "CHECK tiff postfix: %s\n", prefix);
     }
     else if (hdfmode)
     {
@@ -442,7 +442,7 @@ int addfiletodatabase(char *path)
             return 1;
         }
     }
-    else if (strcmp(prefix, ".surface.png") == 0)
+    else if (strcmp(prefix, ".surface.tiff") == 0)
     {
         sprintf(selectstring, "UPDATE %s SET imgpath = \'%s\' WHERE name = \'%s\'\0", modis_table, path, name);
         printf("%s\n", selectstring);
@@ -453,7 +453,7 @@ int addfiletodatabase(char *path)
              return 1;
         }
     }
-    else if (strcmp(prefix, ".mask.png") == 0)
+    else if (strcmp(prefix, ".mask.tiff") == 0)
     {
         sprintf(selectstring, "UPDATE %s SET maskpath = \'%s\' WHERE name = \'%s\'\0", modis_table, path, name);
         printf("%s\n", selectstring);
diff --git a/src/pic.cpp b/src/pic.cpp
index 78f0a13..c1990ea 100644
--- a/src/pic.cpp
+++ b/src/pic.cpp
@@ -7,7 +7,598 @@
 
 #include "pic.h"
 
-using namespace std;
+
+#include "gdal_priv.h"
+
+#define DIGIT_WIDTH 30
+#define DIGIT_HEIGHT 45
+
+#define DIGIT_MATRIX_WIDTH 6
+#define DIGIT_MATRIX_HEIGHT 7
+
+const char zero[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 0, 1, 1, 1, 0, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 1, 1, 1, 0, 0 }
+                     };
+
+const char one[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 0, 0, 1, 0, 0, 0 },
+                      { 0, 1, 1, 0, 0, 0 },
+                      { 0, 0, 1, 0, 0, 0 },
+                      { 0, 0, 1, 0, 0, 0 },
+                      { 0, 0, 1, 0, 0, 0 },
+                      { 0, 0, 1, 0, 0, 0 },
+                      { 1, 1, 1, 1, 1, 0 }
+                     };
+const char two[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 0, 1, 1, 1, 0, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 0, 0, 0, 1, 0 },
+                      { 0, 0, 0, 1, 0, 0 },
+                      { 0, 0, 1, 0, 0, 0 },
+                      { 0, 1, 0, 0, 0, 0 },
+                      { 1, 1, 1, 1, 1, 0 }
+                     };
+const char three[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 0, 1, 1, 1, 0, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 0, 0, 0, 1, 0 },
+                      { 0, 0, 1, 1, 0, 0 },
+                      { 0, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 1, 1, 1, 0, 0 }
+                     };
+const char four[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 0, 0, 0, 1, 0, 0 },
+                      { 0, 0, 1, 1, 0, 0 },
+                      { 0, 1, 0, 1, 0, 0 },
+                      { 1, 0, 0, 1, 0, 0 },
+                      { 1, 1, 1, 1, 1, 0 },
+                      { 0, 0, 0, 1, 0, 0 },
+                      { 0, 0, 0, 1, 0, 0 }
+                     };
+const char five[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 1, 1, 1, 1, 1, 0 },
+                      { 1, 0, 0, 0, 0, 0 },
+                      { 1, 1, 1, 1, 0, 0 },
+                      { 0, 0, 0, 0, 1, 0 },
+                      { 0, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 1, 1, 1, 0, 0 }
+                     };
+const char six[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 0, 1, 1, 1, 0, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 0, 0 },
+                      { 1, 1, 1, 1, 0, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 1, 1, 1, 0, 0 }
+                     };
+const char seven[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 1, 1, 1, 1, 1, 0 },
+                      { 0, 0, 0, 0, 1, 0 },
+                      { 0, 0, 0, 1, 0, 0 },
+                      { 0, 0, 1, 0, 0, 0 },
+                      { 0, 0, 1, 0, 0, 0 },
+                      { 0, 0, 1, 0, 0, 0 },
+                      { 0, 0, 1, 0, 0, 0 }
+                     };
+const char eight[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 0, 1, 1, 1, 0, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 1, 1, 1, 0, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 1, 1, 1, 0, 0 }
+                     };
+const char nine[DIGIT_MATRIX_HEIGHT][DIGIT_MATRIX_WIDTH] =
+                    {
+                      { 0, 1, 1, 1, 0, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 1, 1, 1, 1, 0 },
+                      { 0, 0, 0, 0, 1, 0 },
+                      { 1, 0, 0, 0, 1, 0 },
+                      { 0, 1, 1, 1, 0, 0 }
+                     };
+//using namespace std;
+
+double abs(double value)
+{
+    return value > 0? value: -value;
+}
+
+
+
+void print_number_png(int value, int xfirst, int yfirst, int xlast, int ylast, png::image<png::rgb_pixel> &image)
+{
+    int digit = 0;
+    int i, j, ki, kj, ii, jj;
+    ki = DIGIT_WIDTH/DIGIT_MATRIX_WIDTH;
+    kj = DIGIT_HEIGHT/DIGIT_MATRIX_HEIGHT;
+    while (value != 0)
+    {
+        digit = value%10;
+        value = value/10;
+        switch (digit)
+        {
+#define DIGITPNG(name)                                                                     \
+                for (i = DIGIT_MATRIX_WIDTH; i > 0; i--)                                \
+                {                                                                       \
+                    for (j = DIGIT_MATRIX_HEIGHT; j > 0; j--)                           \
+                    {                                                                   \
+                        if (name[DIGIT_MATRIX_HEIGHT - j][DIGIT_MATRIX_WIDTH - i])      \
+                        {                                                               \
+                            for (ii = i * ki; (ii > (i - 1) * ki) && (ii > 0); ii--)    \
+                            {                                                           \
+                                for (jj = j * kj; (jj > (j - 1) * kj) && (jj > 0); jj--)                                                \
+                                {                                                                                                       \
+                                    image[xlast - jj > 0? xlast - jj: 0][ylast - ii > 0? ylast - ii: 0] = png::rgb_pixel(0, 255, 0);    \
+                                }                                                                                                       \
+                            }                                                           \
+                        }                                                               \
+                        else                                                            \
+                          for (ii = i * ki; (ii > (i - 1) * ki) && (ii > 0); ii--)      \
+                            {                                                           \
+                                for (jj = j * kj; (jj > (j - 1) * kj) && (jj > 0); jj--)                                                \
+                                {                                                                                                       \
+                                    image[xlast - jj > 0? xlast - jj: 0][ylast - ii > 0? ylast - ii: 0] = png::rgb_pixel(0, 0, 0);      \
+                                }                                                                                                       \
+                            }                                                           \
+                    }                                                                   \
+                }
+            case 0:
+            {
+                DIGITPNG(zero);
+                break;
+            }
+            case 1:
+            {
+                DIGITPNG(one);
+                break;
+            }
+            case 2:
+            {
+                DIGITPNG(two);
+                break;
+            }
+            case 3:
+            {
+                DIGITPNG(three);
+                break;
+            }
+            case 4:
+            {
+                DIGITPNG(four);
+                break;
+            }
+            case 5:
+            {
+                DIGITPNG(five);
+                break;
+            }
+            case 6:
+            {
+                DIGITPNG(six);
+                break;
+            }
+            case 7:
+            {
+                DIGITPNG(seven);
+                break;
+            }
+            case 8:
+            {
+                DIGITPNG(eight);
+                break;
+            }
+            case 9:
+            {
+                DIGITPNG(nine);
+                break;
+            }
+            default:
+            {
+                DIGITPNG(zero);
+                break;
+            }
+        }
+        ylast -= DIGIT_WIDTH;
+    }
+}
+
+void print_number(int value, int xfirst, int yfirst, int xlast, int ylast, GByte *imgRaster, arrays *a)
+{
+    int digit = 0;
+    int i, j, ki, kj, ii, jj;
+    ki = DIGIT_WIDTH/DIGIT_MATRIX_WIDTH;
+    kj = DIGIT_HEIGHT/DIGIT_MATRIX_HEIGHT;
+    while (value != 0)
+    {
+        digit = value%10;
+        value = value/10;
+        switch (digit)
+        {
+#define DIGIT(name)                                                                     \
+                for (i = DIGIT_MATRIX_WIDTH; i > 0; i--)                                \
+                {                                                                       \
+                    for (j = DIGIT_MATRIX_HEIGHT; j > 0; j--)                           \
+                    {                                                                   \
+                        if (name[DIGIT_MATRIX_HEIGHT - j][DIGIT_MATRIX_WIDTH - i])      \
+                        {                                                               \
+                            for (ii = i * ki; (ii > (i - 1) * ki) && (ii > 0); ii--)    \
+                            {                                                           \
+                                for (jj = j * kj; (jj > (j - 1) * kj) && (jj > 0); jj--)                                                  \
+                                {                                                                                                         \
+                                    imgRaster[3*((xlast - jj > 0? xlast - jj: 0)*a->widthq + (ylast - ii > 0? ylast - ii: 0))] = 0;       \
+                                    imgRaster[3*((xlast - jj > 0? xlast - jj: 0)*a->widthq + (ylast - ii > 0? ylast - ii: 0)) + 1] = 255; \
+                                    imgRaster[3*((xlast - jj > 0? xlast - jj: 0)*a->widthq + (ylast - ii > 0? ylast - ii: 0)) + 2] = 0;   \
+                                }                                                                                                         \
+                            }                                                           \
+                        }                                                               \
+                        else                                                            \
+                          for (ii = i * ki; (ii > (i - 1) * ki) && (ii > 0); ii--)      \
+                            {                                                           \
+                                for (jj = j * kj; (jj > (j - 1) * kj) && (jj > 0); jj--)                                                  \
+                                {                                                                                                         \
+                                    imgRaster[3*((xlast - jj > 0? xlast - jj: 0)*a->widthq + (ylast - ii > 0? ylast - ii: 0))] = 0;       \
+                                    imgRaster[3*((xlast - jj > 0? xlast - jj: 0)*a->widthq + (ylast - ii > 0? ylast - ii: 0)) + 1] = 0;   \
+                                    imgRaster[3*((xlast - jj > 0? xlast - jj: 0)*a->widthq + (ylast - ii > 0? ylast - ii: 0)) + 2] = 0;   \
+                                }                                                                                                         \
+                            }                                                           \
+                    }                                                                   \
+                }
+            case 0:
+            {
+                DIGIT(zero);
+                break;
+            }
+            case 1:
+            {
+                DIGIT(one);
+                break;
+            }
+            case 2:
+            {
+                DIGIT(two);
+                break;
+            }
+            case 3:
+            {
+                DIGIT(three);
+                break;
+            }
+            case 4:
+            {
+                DIGIT(four);
+                break;
+            }
+            case 5:
+            {
+                DIGIT(five);
+                break;
+            }
+            case 6:
+            {
+                DIGIT(six);
+                break;
+            }
+            case 7:
+            {
+                DIGIT(seven);
+                break;
+            }
+            case 8:
+            {
+                DIGIT(eight);
+                break;
+            }
+            case 9:
+            {
+                DIGIT(nine);
+                break;
+            }
+            default:
+            {
+                DIGIT(zero);
+                break;
+            }
+        }
+        ylast -= DIGIT_WIDTH;
+    }
+}
+
+bool createGDALRaster(char *filenamemap, char *filenamemask,  arrays *a, ProgressViewer *progress, int progresspart)
+{
+    const char *pszFormat = "GTiff";
+    GDALDriver *poDriver;
+    char **papszMetadata;
+    GDALDataset *poDstDS;
+    char **papszOptions = NULL;
+    double adfGeoTransform[6] = { 444720, 30, 0, 3751320, 0, -30 };
+    OGRSpatialReference oSRS;
+    char *pszSRS_WKT = NULL;
+    GDALRasterBand *poBand;
+    GByte *imgRaster;
+
+    char modifiedfilename[255];
+    bool detected = false;
+    int i; int j;
+    int progress_steps_number = 12;
+    int progress_bit = progresspart/progress_steps_number;
+
+    int hi = 0;
+    int hj = 0;
+    int kmi = 0;
+    int kmj = 0;
+    int kmii = 0;
+    int kmjj = 0;
+    int r, g, b;
+#if 0
+    double          dfMinX=0.0, dfMinY=0.0, dfMaxX=0.0, dfMaxY=0.0;
+    char                **papszTO = NULL;
+    int bCreateOutput = 0;
+
+    char *pszSRS = SanitizeSRS("EPSG:4326");
+    papszTO = CSLSetNameValue( papszTO, "DST_SRS", pszSRS );
+    CPLFree( pszSRS );
+    papszTO = CSLSetNameValue( papszTO, "METHOD", "GEOLOC_ARRAY" );
+    dfMinX = CPLAtofM("62");
+    dfMinY = CPLAtofM("42");
+    dfMaxX = CPLAtofM("108");
+    dfMaxY = CPLAtofM("66");
+    bCreateOutput = TRUE;
+    hDstDS = GDALWarpCreateOutput( papszSrcFiles, pszDstFilename,pszFormat,
+                                            papszTO, &papszCreateOptions,
+                                            eOutputType, &hUniqueTransformArg,
+                                            &hUniqueSrcDS);
+#endif
+    poDriver = GetGDALDriverManager()->GetDriverByName(pszFormat);
+
+    if( poDriver == NULL )
+        return false;
+
+    papszMetadata = poDriver->GetMetadata();
+    if( !CSLFetchBoolean( papszMetadata, GDAL_DCAP_CREATE, FALSE ) )
+    {
+       fprintf(stderr, "Driver %s doesn't support Create() method\n", pszFormat);
+       return false;
+    }
+    imgRaster = (GByte *)malloc(a->widthq*a->heightq*3*sizeof(GByte));
+
+    if (filenamemap)
+    {
+        poDstDS = poDriver->Create( filenamemap, a->widthq, a->heightq, 3, GDT_Byte, papszOptions );
+
+
+        poDstDS->SetGeoTransform( adfGeoTransform );
+        //GDALColorTable *poCT= new GDALColorTable(GPI_RGB);
+        oSRS.SetUTM( 11, TRUE );
+        oSRS.SetWellKnownGeogCS( "NAD27" );
+        oSRS.exportToWkt( &pszSRS_WKT );
+        poDstDS->SetProjection( pszSRS_WKT );
+        CPLFree( pszSRS_WKT );
+        //poBand = poDstDS->GetRasterBand(1);
+        //poBand->SetColorTable(poCT);
+        for (i = 0; i < a->heightq; i++)
+            {
+                    hi = int(a->heighth/(double)a->heightq*i);
+
+                    for (j = 0 ; j < a->widthq; j++)
+                    {
+                            hj = int(a->widthh/(double)a->widthq*j);
+
+
+                            r = ((a->radianceq[0][i][j] - a->offsetsq[0])*a->scalesq[0]*255)/(150);
+                            g = ((a->radianceh[1][hi][hj] - a->offsetsh[1])*a->scalesh[1]*255)/(150);
+                            b = ((a->radianceh[0][hi][hj] - a->offsetsh[0])*a->scalesh[0]*255)/(150);
+
+                            if (r > 255) r = 255;
+                            if (g > 255) g = 255;
+                            if (b > 255) b = 255;
+                            imgRaster[3*(i*a->widthq + j)] = r;
+                            imgRaster[3*(i*a->widthq + j) + 1] = g;
+                            imgRaster[3*(i*a->widthq + j) + 2] = b;
+                    }
+            }
+            progress->setValue(progress->Value() + progress_bit);
+            for (i = 0; i < a->height1; i++)
+            {
+                    kmi = int(a->heightq/(double)a->height1*i);
+                    for (j = 0; j < a->width1; j++)
+                    {
+                            if ((abs(a->latitude[i][j] - int(a->latitude[i][j])) < 0.03) ||
+                                (abs(a->longitude[i][j] - int(a->longitude[i][j])) < 0.03))
+                            {
+                                    kmj = int(a->widthq/(double)a->width1*j);
+                                    for (kmii = (kmi - 2 < 0? 0: kmi - 2); kmii < (kmi + 3 >= a->heightq? a->heightq - 1: kmi + 3); kmii++)
+                                    {
+                                        for (kmjj = (kmj - 2 < 0? 0: kmj - 2); kmjj < (kmj + 3 >= a->widthq? a->widthq - 1: kmj + 3); kmjj++)
+                                        {
+                                            imgRaster[3*(kmii*a->widthq + kmjj)] = 0;
+                                            imgRaster[3*(kmii*a->widthq + kmjj) + 1] = 0;
+                                            imgRaster[3*(kmii*a->widthq + kmjj) + 2] = 0;
+                                        }
+                                    }
+                            }
+                    }
+            }
+
+            for (i = 0; i < a->height1; i ++)
+            {
+                kmi = int(a->heightq/(double)a->height1*i);
+                for (j = 0; j < a->width1; j++)
+                {
+                    if ((abs(a->longitude[i][j] - int(a->longitude[i][j])) < 0.03) &&
+                        (abs(a->latitude[i][j] - int(a->latitude[i][j])) > 0.49) && (abs(a->latitude[i][j] - int(a->latitude[i][j])) < 0.51))
+                            {
+                                    kmj = int(a->widthq/(double)a->width1*j);
+                                    /*for (kmii = (kmi - 50 < 0? 0: kmi - 50); kmii < (kmi + 51 >= a->heightq? a->heightq - 1: kmi + 51); kmii++)
+                                    {
+                                        for (kmjj = (kmj - 50 < 0? 0: kmj - 50); kmjj < (kmj + 51 >= a->widthq? a->widthq - 1: kmj + 51); kmjj++)
+                                        {
+                                            image[kmii][kmjj] = png::rgb_pixel(255, 0, 0);
+                                        }
+                                    }*/
+                                    print_number(int(a->longitude[i][j]),
+                                                  kmi - 40 < 0? 0: kmi - 40,
+                                                  kmj - 40 < 0? 0: kmj - 40,
+                                                  kmi + 41 >= a->heightq? a->heightq - 1: kmi + 41,
+                                                  kmj + 41 >= a->widthq? a->widthq - 1: kmj + 41,
+                                                  imgRaster, a);
+                            }
+                }
+            }
+            for (j = 0; j < a->width1; j ++)
+            {
+                kmj = int(a->widthq/(double)a->width1*j);
+                for (i = 0; i < a->height1; i++)
+                {
+                    if ((abs(a->latitude[i][j] - int(a->latitude[i][j])) < 0.03) &&
+                        (abs(a->longitude[i][j] - int(a->longitude[i][j])) > 0.49) && (abs(a->longitude[i][j] - int(a->longitude[i][j])) < 0.51))
+                            {
+                                    kmi = int(a->heightq/(double)a->height1*i);
+                                    /*for (kmii = (kmi - 50 < 0? 0: kmi - 50); kmii < (kmi + 51 >= a->heightq? a->heightq - 1: kmi + 51); kmii++)
+                                    {
+                                        for (kmjj = (kmj - 50 < 0? 0: kmj - 50); kmjj < (kmj + 51 >= a->widthq? a->widthq - 1: kmj + 51); kmjj++)
+                                        {
+                                            image[kmii][kmjj] = png::rgb_pixel(0, 0, 255);
+                                        }
+                                    }*/
+                                    print_number(int(a->latitude[i][j]),
+                                                  kmi - 40 < 0? 0: kmi - 40,
+                                                  kmj - 40 < 0? 0: kmj - 40,
+                                                  kmi + 41 >= a->heightq? a->heightq - 1: kmi + 41,
+                                                  kmj + 41 >= a->widthq? a->widthq - 1: kmj + 41,
+                                                  imgRaster, a);
+                            }
+                }
+            }
+
+            progress->setValue(progress->Value() + progress_bit);
+            progress->setValue(progress->Value() + progress_bit);
+            progress->setValue(progress->Value() + progress_bit*3);
+            poDstDS->RasterIO( GF_Write, 0, 0, a->widthq, a->heightq,
+                              imgRaster, a->widthq, a->heightq, GDT_Byte, 3, NULL, 3, 3 * a->widthq, 1);
+
+            GDALClose( (GDALDatasetH) poDstDS );
+    }
+    if (filenamemask)
+        {
+            poDstDS = poDriver->Create( filenamemask, a->widthq, a->heightq, 3, GDT_Byte, papszOptions );
+            poDstDS->SetGeoTransform( adfGeoTransform );
+            oSRS.SetUTM( 11, TRUE );
+            oSRS.SetWellKnownGeogCS( "NAD27" );
+            oSRS.exportToWkt( &pszSRS_WKT );
+            poDstDS->SetProjection( pszSRS_WKT );
+            CPLFree( pszSRS_WKT );
+            r = 55;
+            g = 55;
+            b = 55;
+            int k = 0;
+            int pixelmask[7];
+            for (i = 0; i < a->heightq; i++)
+            {
+                    for (j = 0; j < a->widthq; j++)
+                    {
+                            for (k = 0; k < 7; k++)
+                            {
+                                pixelmask[k] = a->cloudmask[i][j] % 2;
+                                a->cloudmask[i][j] /= 2;
+                            }
+                            r = 55;
+                            g = 55;
+                            b = 55;
+                            detected = false;
+                            if (pixelmask[0])
+                            {
+                                    r += 50;
+                                    detected = true;
+                                    //image[i][j] = png::rgb_pixel(255, 70, 70);
+                            }
+                            if (pixelmask[1])
+                            {
+                                    b += 50;
+                                    detected = true;
+                                    //image[i][j] = png::rgb_pixel(70, 70, 255);
+                            }
+
+
+                            if (pixelmask[3]) //nearby
+                            {
+                                    //g = 100;
+                                    //r = 250;
+                                    //b = 100;
+                                    //detected = true;
+                            }
+                            if (pixelmask[4])
+                            {
+
+                                    r += 100;
+
+                                    detected = true;
+                            }
+                            if (pixelmask[2])
+                            {
+                                    g += 50;
+                                    detected = false;
+                                    //image[i][j] = png::rgb_pixel(70, 255, 70);
+                            }
+
+                            if (pixelmask[5])
+                            {
+                                    /*g += 100;
+                                    detected = true;*/
+                            }
+
+                            if (pixelmask[6])
+                            {
+                                    b += 100;
+                                    detected = true;
+                            }
+
+                            if (detected)
+                            {
+                                    imgRaster[3*(i*a->widthq + j)] = r;
+                                    imgRaster[3*(i*a->widthq + j) + 1] = g;
+                                    imgRaster[3*(i*a->widthq + j) + 2] = b;
+                            }
+                            else
+                            {
+                                    imgRaster[3*(i*a->widthq + j)] = 0;
+                                    imgRaster[3*(i*a->widthq + j) + 1] = 0;
+                                    imgRaster[3*(i*a->widthq + j) + 2] = 0;
+                            }
+
+                    }
+            }
+
+            progress->setValue(progress->Value() + progress_bit);
+            poDstDS->RasterIO( GF_Write, 0, 0, a->widthq, a->heightq,
+                              imgRaster, a->widthq, a->heightq, GDT_Byte, 3, NULL, 3, 3 * a->widthq, 1);
+
+            GDALClose( (GDALDatasetH) poDstDS );
+        }
+        progress->setValue(progress->Value() + progress_bit*3);
+    free(imgRaster);
+    return true;
+}
 
 bool savepicture(char *filenamemap, char *filenamemask,  arrays *a, ProgressViewer *progress, int progresspart)
 {
@@ -24,6 +615,8 @@ bool savepicture(char *filenamemap, char *filenamemask,  arrays *a, ProgressView
 	int hj = 0;
 	int kmi = 0;
 	int kmj = 0;
+        int kmii = 0;
+        int kmjj = 0;
 	int r, g, b;
 
 
@@ -42,11 +635,6 @@ bool savepicture(char *filenamemap, char *filenamemask,  arrays *a, ProgressView
                             g = ((a->radianceh[1][hi][hj] - a->offsetsh[1])*a->scalesh[1]*255)/(150);
                             b = ((a->radianceh[0][hi][hj] - a->offsetsh[0])*a->scalesh[0]*255)/(150);
 
-
-                            //r = ((radianceq[0][i][j])*255)/16000;
-                            //g = ((radianceh[1][hi][hj])*255)/16000;
-                            //b = ((radianceh[0][hi][hj])*255)/16000;
-                            //printf("%f %f\n", offsets[0], scales[0]);
                             if (r > 255) r = 255;
                             if (g > 255) g = 255;
                             if (b > 255) b = 255;
@@ -59,36 +647,73 @@ bool savepicture(char *filenamemap, char *filenamemask,  arrays *a, ProgressView
                     kmi = int(a->heightq/(double)a->height1*i);
                     for (j = 0; j < a->width1; j++)
                     {
-                            if ((a->latitude[i][j] - int(a->latitude[i][j])) < 0.01)
-                            {
-                                    kmj = int(a->widthq/(double)a->width1*j);
-                                    image[kmi][kmj] = png::rgb_pixel(250, 0, 0);
-                            }
-                            if ((-a->latitude[i][j] + int(a->latitude[i][j])) > - 0.01)
+                            if ((abs(a->latitude[i][j] - int(a->latitude[i][j])) < 0.03) ||
+                                (abs(a->longitude[i][j] - int(a->longitude[i][j])) < 0.03))
                             {
                                     kmj = int(a->widthq/(double)a->width1*j);
-                                    image[kmi][kmj] = png::rgb_pixel(0, 0, 0);
+                                    for (kmii = (kmi - 2 < 0? 0: kmi - 2); kmii < (kmi + 3 >= a->heightq? a->heightq - 1: kmi + 3); kmii++)
+                                    {
+                                        for (kmjj = (kmj - 2 < 0? 0: kmj - 2); kmjj < (kmj + 3 >= a->widthq? a->widthq - 1: kmj + 3); kmjj++)
+                                        {
+                                            image[kmii][kmjj] = png::rgb_pixel(0, 0, 0);
+                                        }
+                                    }
                             }
                     }
             }
-            progress->setValue(progress->Value() + progress_bit);
-            for (i = 0; i < a->height1; i++)
+
+            for (i = 0; i < a->height1; i ++)
             {
-                    kmi = int(a->heightq/(double)a->height1*i);
-                    for (j = 0; j < a->width1; j++)
-                    {
-                            if ((a->longitude[i][j] - int(a->longitude[i][j])) < 0.03)
+                kmi = int(a->heightq/(double)a->height1*i);
+                for (j = 0; j < a->width1; j++)
+                {
+                    if ((abs(a->longitude[i][j] - int(a->longitude[i][j])) < 0.03) &&
+                        (abs(a->latitude[i][j] - int(a->latitude[i][j])) > 0.49) && (abs(a->latitude[i][j] - int(a->latitude[i][j])) < 0.51))
                             {
                                     kmj = int(a->widthq/(double)a->width1*j);
-                                    image[kmi][kmj] = png::rgb_pixel(250, 0, 0);
+                                    /*for (kmii = (kmi - 50 < 0? 0: kmi - 50); kmii < (kmi + 51 >= a->heightq? a->heightq - 1: kmi + 51); kmii++)
+                                    {
+                                        for (kmjj = (kmj - 50 < 0? 0: kmj - 50); kmjj < (kmj + 51 >= a->widthq? a->widthq - 1: kmj + 51); kmjj++)
+                                        {
+                                            image[kmii][kmjj] = png::rgb_pixel(255, 0, 0);
+                                        }
+                                    }*/
+                                    print_number_png(int(a->longitude[i][j]),
+                                                  kmi - 40 < 0? 0: kmi - 40,
+                                                  kmj - 40 < 0? 0: kmj - 40,
+                                                  kmi + 41 >= a->heightq? a->heightq - 1: kmi + 41,
+                                                  kmj + 41 >= a->widthq? a->widthq - 1: kmj + 41,
+                                                  image);
                             }
-                            if ((-a->longitude[i][j] + int(a->longitude[i][j])) > - 0.03)
+                }
+            }
+            for (j = 0; j < a->width1; j ++)
+            {
+                kmj = int(a->widthq/(double)a->width1*j);
+                for (i = 0; i < a->height1; i++)
+                {
+                    if ((abs(a->latitude[i][j] - int(a->latitude[i][j])) < 0.03) &&
+                        (abs(a->longitude[i][j] - int(a->longitude[i][j])) > 0.49) && (abs(a->longitude[i][j] - int(a->longitude[i][j])) < 0.51))
                             {
-                                    kmj = int(a->widthq/(double)a->width1*j);
-                                    image[kmi][kmj] = png::rgb_pixel(0, 0, 0);
+                                    kmi = int(a->heightq/(double)a->height1*i);
+                                    /*for (kmii = (kmi - 50 < 0? 0: kmi - 50); kmii < (kmi + 51 >= a->heightq? a->heightq - 1: kmi + 51); kmii++)
+                                    {
+                                        for (kmjj = (kmj - 50 < 0? 0: kmj - 50); kmjj < (kmj + 51 >= a->widthq? a->widthq - 1: kmj + 51); kmjj++)
+                                        {
+                                            image[kmii][kmjj] = png::rgb_pixel(0, 0, 255);
+                                        }
+                                    }*/
+                                    print_number_png(int(a->latitude[i][j]),
+                                                  kmi - 40 < 0? 0: kmi - 40,
+                                                  kmj - 40 < 0? 0: kmj - 40,
+                                                  kmi + 41 >= a->heightq? a->heightq - 1: kmi + 41,
+                                                  kmj + 41 >= a->widthq? a->widthq - 1: kmj + 41,
+                                                  image);
                             }
-                    }
+                }
             }
+
+            progress->setValue(progress->Value() + progress_bit);
             progress->setValue(progress->Value() + progress_bit);
             image.write(filenamemap);
         }
@@ -196,6 +821,7 @@ bool savepicture(char *filenamemap, char *filenamemask,  arrays *a, ProgressView
 
                     }
             }
+
             progress->setValue(progress->Value() + progress_bit);
             //sprintf(modifiedfilename, "%s%s", filename, "mask.png");
             image.write(filenamemask);
diff --git a/src/readhdf.cpp b/src/readhdf.cpp
index ca772da..76ed034 100644
--- a/src/readhdf.cpp
+++ b/src/readhdf.cpp
@@ -6,6 +6,8 @@
  */
 #include "readhdf.h"
 
+using namespace std;
+
 bool readarray(int32 sds_id, unsigned short **dest, int32 *rank, int32 *dimsizes, int32 *datatype, int32 *numattr, int depth)
 {
   int32 *start, *edges, *stride;
